# Generated by Django 4.0.1 on 2022-01-26 09:28

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import phonenumber_field.modelfields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('location_type', models.CharField(choices=[('PHONE', 'Phone Call'), ('GMEET', 'Google Meet')], default='PHONE', max_length=8)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, editable=False, max_length=128, region=None)),
                ('duration', models.IntegerField(choices=[(15, '15 min'), (30, '30 min'), (45, '45 min'), (60, '60 min')], default=15, help_text='Duration of event in minutes')),
                ('description', models.TextField(blank=True)),
                ('start_time', models.DateTimeField(null=True)),
                ('end_time', models.DateTimeField(editable=False, null=True)),
                ('booker_name', models.CharField(blank=True, max_length=64)),
                ('booker_email', models.EmailField(blank=True, max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sun_off', models.BooleanField(default=True)),
                ('sun_start', models.TimeField(blank=True, null=True)),
                ('sun_end', models.TimeField(blank=True, null=True)),
                ('mon_off', models.BooleanField(default=False)),
                ('mon_start', models.TimeField(blank=True, null=True)),
                ('mon_end', models.TimeField(blank=True, null=True)),
                ('tue_off', models.BooleanField(default=False)),
                ('tue_start', models.TimeField(blank=True, null=True)),
                ('tue_end', models.TimeField(blank=True, null=True)),
                ('wed_off', models.BooleanField(default=False)),
                ('wed_start', models.TimeField(blank=True, null=True)),
                ('wed_end', models.TimeField(blank=True, null=True)),
                ('thu_off', models.BooleanField(default=False)),
                ('thu_start', models.TimeField(blank=True, null=True)),
                ('thu_end', models.TimeField(blank=True, null=True)),
                ('fri_off', models.BooleanField(default=False)),
                ('fri_start', models.TimeField(blank=True, null=True)),
                ('fri_end', models.TimeField(blank=True, null=True)),
                ('sat_off', models.BooleanField(default=True)),
                ('sat_start', models.TimeField(blank=True, null=True)),
                ('sat_end', models.TimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'availability schedule',
                'verbose_name_plural': 'availability schedule',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=64)),
                ('last_name', models.CharField(blank=True, max_length=64)),
                ('email', models.EmailField(help_text='Email where event invites will be sent to.', max_length=254)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(help_text='Shared with the booker for phone call events.', max_length=128, region=None)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
